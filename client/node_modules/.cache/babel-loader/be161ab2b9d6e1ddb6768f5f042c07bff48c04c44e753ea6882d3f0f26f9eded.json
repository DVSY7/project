{"ast":null,"code":"//client/src/componant/content/api/gallery.js\nimport axios from'axios';// 게시글 정보 불러오기\nexport async function galleryfetch(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:15;let sort=arguments.length>2?arguments[2]:undefined;let searchUser=arguments.length>3?arguments[3]:undefined;let isSort='date DESC';if(sort===\"최신순\"){isSort='date DESC';}else if(sort===\"지난순\"){isSort='date ASC';}else if(sort===\"조회순\"){isSort='views DESC';}else if(sort===\"인기순\"){isSort='likes DESC';}console.log(isSort);try{const response=await axios.get(`http://localhost:5000/api/gallery?page=${page}&limit=${limit}&sort=${isSort}&searchUser=${searchUser}`);// response.data = [{ id, username, …, thumbnail_url }, …]\nreturn response.data;}catch(error){console.error(\"갤러리 데이터 요청 실패:\",error);return[];}}// 게시글 댓글 불러오기\nexport const fetchComment=async(galleryID,userID)=>{try{if(galleryID){const res=await axios.get(`http://localhost:5000/api/gallery/comments?galleryID=${galleryID}&userID=${userID}`);console.log(\"정상적으로 실행중\");return res.data;}console.log(\"아이디가 존재하지 않음\");}catch(error){return{message:\"댓글불러오기 실패:\",error};}};// 게시글 댓글 저장\nexport const updateComment=async(galleryID,userID,commentText)=>{try{const res=await axios.post(`http://localhost:5000/api/users/gallery/updateComment`,{galleryID,userID,commentText});console.log(\"댓글저장중...\");return res.data;}catch(error){console.error(\"댓글 저장 실패:\",error);return{message:error};}};","map":{"version":3,"names":["axios","galleryfetch","page","arguments","length","undefined","limit","sort","searchUser","isSort","console","log","response","get","data","error","fetchComment","galleryID","userID","res","message","updateComment","commentText","post"],"sources":["C:/git/project/client/src/componant/content/api/gallery.js"],"sourcesContent":["//client/src/componant/content/api/gallery.js\r\n\r\nimport axios from 'axios';\r\n\r\n// 게시글 정보 불러오기\r\nexport async function galleryfetch(page = 1, limit = 15, sort, searchUser) {\r\n    let isSort = 'date DESC';\r\n\r\n    if(sort === \"최신순\"){\r\n        isSort = 'date DESC';\r\n    }else if(sort === \"지난순\"){\r\n        isSort = 'date ASC';\r\n    }else if(sort === \"조회순\"){\r\n        isSort = 'views DESC';\r\n    }else if(sort === \"인기순\"){\r\n        isSort = 'likes DESC';\r\n    }\r\n\r\n\r\n    console.log(isSort);\r\n\r\n    try {\r\n        const response = await axios.get(\r\n            `http://localhost:5000/api/gallery?page=${page}&limit=${limit}&sort=${isSort}&searchUser=${searchUser}`\r\n        );\r\n        // response.data = [{ id, username, …, thumbnail_url }, …]\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"갤러리 데이터 요청 실패:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// 게시글 댓글 불러오기\r\nexport const fetchComment = async (galleryID, userID) =>{\r\n    try{\r\n        if(galleryID){\r\n            const res = await axios.get(`http://localhost:5000/api/gallery/comments?galleryID=${galleryID}&userID=${userID}`);\r\n            console.log(\"정상적으로 실행중\");\r\n            return res.data;\r\n        }\r\n        console.log(\"아이디가 존재하지 않음\");\r\n    }catch(error){\r\n        return {message:\"댓글불러오기 실패:\",error};\r\n    }\r\n}\r\n\r\n// 게시글 댓글 저장\r\nexport const updateComment = async(galleryID, userID, commentText) =>{\r\n    try{\r\n        const res = await axios.post(`http://localhost:5000/api/users/gallery/updateComment`,{\r\n            galleryID,\r\n            userID,\r\n            commentText\r\n        });\r\n        console.log(\"댓글저장중...\");\r\n        return res.data;\r\n    }catch(error){\r\n        console.error(\"댓글 저장 실패:\",error);\r\n        return {message:error};\r\n    }\r\n}"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,MAAO,eAAe,CAAAC,YAAYA,CAAA,CAAyC,IAAxC,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,IAAE,CAAAG,KAAK,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,IAAE,CAAAI,IAAI,CAAAJ,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,IAAE,CAAAG,UAAU,CAAAL,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,CACrE,GAAI,CAAAI,MAAM,CAAG,WAAW,CAExB,GAAGF,IAAI,GAAK,KAAK,CAAC,CACdE,MAAM,CAAG,WAAW,CACxB,CAAC,IAAK,IAAGF,IAAI,GAAK,KAAK,CAAC,CACpBE,MAAM,CAAG,UAAU,CACvB,CAAC,IAAK,IAAGF,IAAI,GAAK,KAAK,CAAC,CACpBE,MAAM,CAAG,YAAY,CACzB,CAAC,IAAK,IAAGF,IAAI,GAAK,KAAK,CAAC,CACpBE,MAAM,CAAG,YAAY,CACzB,CAGAC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC,CAEnB,GAAI,CACA,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAZ,KAAK,CAACa,GAAG,CAC5B,0CAA0CX,IAAI,UAAUI,KAAK,SAASG,MAAM,eAAeD,UAAU,EACzG,CAAC,CACD;AACA,MAAO,CAAAI,QAAQ,CAACE,IAAI,CACxB,CAAE,MAAOC,KAAK,CAAE,CACZL,OAAO,CAACK,KAAK,CAAC,gBAAgB,CAAEA,KAAK,CAAC,CACtC,MAAO,EAAE,CACb,CACJ,CAEA;AACA,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAAA,CAAOC,SAAS,CAAEC,MAAM,GAAI,CACpD,GAAG,CACC,GAAGD,SAAS,CAAC,CACT,KAAM,CAAAE,GAAG,CAAG,KAAM,CAAAnB,KAAK,CAACa,GAAG,CAAC,wDAAwDI,SAAS,WAAWC,MAAM,EAAE,CAAC,CACjHR,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC,CACxB,MAAO,CAAAQ,GAAG,CAACL,IAAI,CACnB,CACAJ,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,CAC/B,CAAC,MAAMI,KAAK,CAAC,CACT,MAAO,CAACK,OAAO,CAAC,YAAY,CAACL,KAAK,CAAC,CACvC,CACJ,CAAC,CAED;AACA,MAAO,MAAM,CAAAM,aAAa,CAAG,KAAAA,CAAMJ,SAAS,CAAEC,MAAM,CAAEI,WAAW,GAAI,CACjE,GAAG,CACC,KAAM,CAAAH,GAAG,CAAG,KAAM,CAAAnB,KAAK,CAACuB,IAAI,CAAC,uDAAuD,CAAC,CACjFN,SAAS,CACTC,MAAM,CACNI,WACJ,CAAC,CAAC,CACFZ,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC,CACvB,MAAO,CAAAQ,GAAG,CAACL,IAAI,CACnB,CAAC,MAAMC,KAAK,CAAC,CACTL,OAAO,CAACK,KAAK,CAAC,WAAW,CAACA,KAAK,CAAC,CAChC,MAAO,CAACK,OAAO,CAACL,KAAK,CAAC,CAC1B,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}