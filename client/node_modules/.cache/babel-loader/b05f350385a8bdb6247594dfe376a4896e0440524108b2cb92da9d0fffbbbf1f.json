{"ast":null,"code":"var _jsxFileName = \"C:\\\\git\\\\project\\\\client\\\\src\\\\componant\\\\community\\\\chatroom.js\",\n  _s = $RefreshSig$();\n//client/src/componant/community/chatroom.js\n\nimport { useEffect, useState, useMemo, useRef } from \"react\";\nimport Conversation from \"./conversation\";\nimport { insertDateHeaders, formatDateKorean } from \"./utilities/dateUtils\";\nimport { CheckedCurrentMemberButton, CommunityButtons } from \"./ui/button\";\nimport { fetchMessageAPI, fetchMessageReadAPI } from \"./api/fetchMessageAPI\";\nimport io from \"socket.io-client\";\nimport { changeChatRoomColor, changeInterestColor } from \"../profile/utilities/interestColor\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chatroom(props) {\n  _s();\n  // 전달된 대화방과 해당하는 유저정보\n  const {\n    chattingList,\n    selectedList,\n    flexCenter\n  } = props;\n  // 모달을 관리하기 위한 props\n  const {\n    friendList,\n    blockedList,\n    setActionList\n  } = props;\n  // 채팅 송신을 위한 props\n  const {\n    userInfo\n  } = props;\n\n  // 현재 로그인한 유저\n  const {\n    userName\n  } = props;\n\n  // 대화목록 최신화 props\n  const {\n    setFetchChatList\n  } = props;\n\n  // 선택 된 방 상태관리\n  const [chatroom, setChatroom] = useState(\"\");\n\n  // 선택 된 방 테마 상태관리\n  const [chatroomTheme, setChatroomTheme] = useState(\"\");\n\n  // 선택 된 방 방장 프로필 상태관리\n  const [chatroomProfile, setChatroomProfile] = useState(\"\");\n\n  // 선택 된 방 아이디\n  const [chatroomID, setChatroomID] = useState(\"\");\n\n  // 참여인원/나가기 버튼 상태관리 스테이트\n  const [checkedMember, setCheckedMember] = useState(false);\n\n  // 나가기 버튼 상태관리 스테이트\n  const [checkedAction, setCheckedAction] = useState({});\n\n  // 채팅에 입력한 내용 상태관리\n  const [messageText, setMessageText] = useState(\"\");\n\n  // 현재 채팅에 방에 입장한 유저\n  const [chatroomUser, setChatRoomUser] = useState([]);\n\n  // selectedList 값이 변동이 있을때만 실행\n  useEffect(() => {\n    const selectedFriend = chattingList.find(friend => friend.chat_room_id === selectedList);\n    if (selectedFriend) {\n      setChatroom(selectedFriend.owner_name);\n      setChatroomProfile(selectedFriend.profile_image_url);\n      setChatroomTheme(selectedFriend.theme);\n      setChatroomID(selectedFriend.chat_room_id);\n      console.log(selectedFriend);\n    }\n  }, [selectedList, chattingList]);\n\n  // 채팅내용 상태관리\n  const [messaging, setMessaging] = useState([]);\n\n  // 참여인원 상태관리\n  const [currentMembers, setCurrentMembers] = useState([]);\n  useEffect(() => {\n    const getMessage = async () => {\n      try {\n        // 메시지 불러오기\n        const rawMessages = await fetchMessageAPI(chatroomID, \"chatmessage\");\n        const currentMembersList = await fetchMessageAPI(chatroomID, \"currentMember\");\n\n        // 읽음 수 계산\n        const enrichedMessages = await Promise.all(rawMessages.map(async msg => {\n          var _readResult$;\n          const readResult = await fetchMessageReadAPI(userInfo.friend_id, msg.message_id);\n          const readCount = ((_readResult$ = readResult[0]) === null || _readResult$ === void 0 ? void 0 : _readResult$.messageReadCount) || 0;\n          return {\n            ...msg,\n            messageReads: currentMembersList.length - readCount\n          };\n        }));\n        setCurrentMembers(currentMembersList);\n        setMessaging(enrichedMessages);\n      } catch (error) {\n        console.error(\"메세지 불러오기 실패:\", error);\n      }\n    };\n    if (chatroomID) getMessage();\n  }, [chatroomID]);\n\n  // 날짜 구분 로직 추가\n  const formattedMessages = useMemo(() => {\n    return insertDateHeaders(messaging);\n  }, [messaging]);\n  const socketRef = useRef();\n\n  // socket에 연결하는 로직\n  useEffect(() => {\n    // 소켓 생성\n    if (!socketRef.current && userInfo !== undefined) {\n      socketRef.current = io(\"http://localhost:5000\", {\n        transports: [\"websocket\"],\n        // 안정적인 연결 방식 사용\n        autoConnect: false,\n        // 직접 connect() 호출\n        query: {\n          userID: userInfo.friend_id\n        }\n      });\n      console.log(\"userInfo:\", userInfo.friend_id);\n    }\n    const socket = socketRef.current;\n    if (!chatroomID) return;\n    console.log(\"[소켓] 연결 시도 (connect) - 방 ID:\", chatroomID);\n    socket.connect();\n    socket.on(\"connect\", () => {\n      console.log(\"[소켓] 연결 성공:\", socket.id);\n      socket.emit(\"join_room\", chatroomID);\n      console.log(\"[소켓] join_room emit:\", chatroomID);\n    });\n\n    // 현재 채팅중인 유저를 상태에 저장\n    socket.on(\"room_user_count\", data => {\n      setChatRoomUser(data.connectedUserIds);\n    });\n\n    // 메세지 수신하는 부분\n    socket.on(\"receive_message\", msg => {\n      console.log(\"[소켓] receive_message 수신:\", msg);\n      setMessaging(prev => [...prev, msg]);\n\n      // 본인이 보낸 메세지가 아니면, 읽음 처리 서버로 알림\n      if (msg.sender_id !== userInfo.friend_id) {\n        socket.emit(\"message_read\", {\n          message_id: msg.message_id,\n          user_id: userInfo.friend_id\n        });\n      }\n    });\n    socket.on(\"disconnect\", () => {\n      console.log(\"[소켓] 연결 해제됨\");\n    });\n    socket.on(\"connect_error\", err => {\n      console.error(\"[소켓] 연결 오류:\", err.message);\n    });\n    return () => {\n      console.log(\"[소켓] leave_room emit:\", chatroomID);\n      socket.emit(\"leave_room\", chatroomID);\n      socket.off(\"receive_message\");\n      socket.disconnect();\n      console.log(\"[소켓] 연결 해제 (disconnect)\");\n    };\n  }, [chatroomID, userInfo]);\n\n  // 메세지 송신함수\n  const handleSendMessage = () => {\n    if (!messageText.trim()) return;\n    const socket = socketRef.current;\n    if (!socket || !socket.connected) {\n      console.warn(\"소켓 연결되지 않음. 메시지 전송 불가.\");\n      return;\n    }\n    const now = new Date();\n    const kst = new Date(now.getTime() + 9 * 60 * 60 * 1000); // 9시간 더함\n    const newMessage = {\n      chat_room_id: chatroomID,\n      sender_id: userInfo.friend_id,\n      profile_image_url: userInfo.profile_image_url,\n      name: userInfo.name,\n      message: messageText,\n      datetime: kst.toISOString().slice(0, 19).replace(\"T\", \" \"),\n      messageReads: currentMembers.length - chatroomUser.length\n    };\n    socket.emit(\"send_message\", newMessage);\n    // setMessaging((prev) => [...prev, newMessage]);\n    setMessageText(\"\");\n  };\n\n  // 메세지 전송 후 스크롤\n  const messageEndRef = useRef(null);\n  useEffect(() => {\n    if (messageEndRef.current) {\n      messageEndRef.current.scrollIntoView({\n        block: \"end\"\n      });\n    }\n    setFetchChatList(messaging);\n  }, [messaging]);\n\n  // ineterest Color 변수\n  const interestColor = changeInterestColor(chatroomTheme.split(\"&\")[0].trim());\n  // chatRoom Color 변수\n  const chatRoomColor = changeChatRoomColor(chatroomTheme.split(\"&\")[0].trim());\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: chatroom === \"\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${flexCenter} w-full h-full text-black text-opacity-50`,\n      children: \"\\uBD88\\uB7EC\\uC628 \\uB300\\uD654\\uBC29\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uBAA9\\uB85D\\uC744 \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n    // 대화방 선택 시\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex items-center w-full h-[70px] border-b border-solid border-gary-300 bg-white rounded-t-3xl`,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${chatroomProfile}`,\n          alt: \"\\uBBF8\\uB2C8\\uD504\\uB85C\\uD544\",\n          className: `w-[40px] h-[40px] rounded-[50%] ml-4`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `ml-4`,\n          children: chatroom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `ml-4 p-[0.15rem] px-3 text-[0.8rem] rounded-3xl ${interestColor} font-sans font-bold`,\n          children: chatroomTheme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => {\n            setCheckedMember(true);\n          },\n          className: `${flexCenter} ml-auto bg-black hover:bg-blue-500 transition-colors duration-300 text-white rounded-md w-[80px] h-[30px] text-[0.8rem] font-bold cursor-pointer`,\n          children: [\"\\uCC38\\uC5EC\\uC778\\uC6D0\", /*#__PURE__*/_jsxDEV(CheckedCurrentMemberButton, {\n            friendList: friendList,\n            blockedList: blockedList,\n            checkedMember: checkedMember,\n            setCheckedMember: setCheckedMember,\n            chattingList: currentMembers,\n            setActionList: setActionList,\n            userID: userInfo.friend_id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => {\n            setCheckedAction(prev => ({\n              ...prev,\n              [chattingList.id]: true\n            }));\n          },\n          className: `${flexCenter} mx-2 mr-4 bg-black hover:bg-blue-500 transition-colors duration-300 text-white rounded-md w-[80px] h-[30px] text-[0.8rem] font-bold cursor-pointer`,\n          children: [\"\\uBC29 \\uB098\\uAC00\\uAE30\", /*#__PURE__*/_jsxDEV(CommunityButtons, {\n            checkedAction: checkedAction,\n            setCheckedAction: setCheckedAction,\n            title: `${chatroom}님의 대화방`,\n            message: \"정말 나가시겠습니까?\",\n            action: \"나가기\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex flex-col w-full h-[calc(100%_-_140px)] overflow-y-auto ${chatRoomColor}`,\n        children: formattedMessages.map((item, index) => {\n          if (item.type === \"date-stamp\") {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-center text-gray-500 font-bold my-4 font-sans\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `shadow-md px-2 rounded-2xl bg-white`,\n                children: [\"\\uD83D\\uDCC5 \", formatDateKorean(item.date)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 41\n              }, this)\n            }, `date-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 37\n            }, this);\n          }\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Conversation, {\n              message: item,\n              currentUserName: userName,\n              friendList: friendList,\n              blockedList: blockedList,\n              chattingList: messaging,\n              setActionList: setActionList,\n              currentMembers: currentMembers.length,\n              userID: userInfo.friend_id,\n              messageReads: item.messageReads\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 37\n            }, this), formattedMessages.length - 1 === index && /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messageEndRef,\n              className: `h-[10px]`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: ` flex items-center w-full h-[70px] border-t-[2px] border-solid border-gray-200 bg-white rounded-b-3xl`,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: messageText,\n          onKeyDown: e => {\n            if (e.key === 'Enter') {\n              if (e.shiftKey) {\n                return;\n              } else {\n                e.preventDefault(); // 기본 Enter 줄바꿈 방지\n                handleSendMessage();\n              }\n            }\n          },\n          onChange: e => {\n            setMessageText(e.target.value);\n            console.log(messageText);\n          },\n          placeholder: \"\\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\",\n          className: `focus:outline-none resize-none pt-5 pl-5 w-[calc(100%_-_120px)] rounded-3xl`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"\\uD074\\uB9BD\",\n          src: \"/images/\\uD074\\uB9BD.png\",\n          className: `w-[20px] h-[20px] mr-2`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: handleSendMessage,\n          className: `w-[70px] h-[35px] bg-black hover:bg-blue-500 transition-colors duration-300 cursor-pointer rounded-lg flex justify-center items-center`,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"\\uBCF4\\uB0B4\\uAE30\",\n            src: \"/images/\\uBCF4\\uB0B4\\uAE30.png\",\n            className: `w-[20px] h-[20px]`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\n_s(Chatroom, \"EJHNd3QNHLJmauV8DLA5q6t3Fg0=\");\n_c = Chatroom;\nvar _c;\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"names":["useEffect","useState","useMemo","useRef","Conversation","insertDateHeaders","formatDateKorean","CheckedCurrentMemberButton","CommunityButtons","fetchMessageAPI","fetchMessageReadAPI","io","changeChatRoomColor","changeInterestColor","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatroom","props","_s","chattingList","selectedList","flexCenter","friendList","blockedList","setActionList","userInfo","userName","setFetchChatList","chatroom","setChatroom","chatroomTheme","setChatroomTheme","chatroomProfile","setChatroomProfile","chatroomID","setChatroomID","checkedMember","setCheckedMember","checkedAction","setCheckedAction","messageText","setMessageText","chatroomUser","setChatRoomUser","selectedFriend","find","friend","chat_room_id","owner_name","profile_image_url","theme","console","log","messaging","setMessaging","currentMembers","setCurrentMembers","getMessage","rawMessages","currentMembersList","enrichedMessages","Promise","all","map","msg","_readResult$","readResult","friend_id","message_id","readCount","messageReadCount","messageReads","length","error","formattedMessages","socketRef","current","undefined","transports","autoConnect","query","userID","socket","connect","on","id","emit","data","connectedUserIds","prev","sender_id","user_id","err","message","off","disconnect","handleSendMessage","trim","connected","warn","now","Date","kst","getTime","newMessage","name","datetime","toISOString","slice","replace","messageEndRef","scrollIntoView","block","interestColor","split","chatRoomColor","children","className","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onClick","title","action","item","index","type","date","currentUserName","ref","value","onKeyDown","e","key","shiftKey","preventDefault","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["C:/git/project/client/src/componant/community/chatroom.js"],"sourcesContent":["//client/src/componant/community/chatroom.js\r\n\r\nimport { useEffect, useState, useMemo, useRef } from \"react\";\r\nimport Conversation from \"./conversation\";\r\nimport { insertDateHeaders, formatDateKorean } from \"./utilities/dateUtils\";\r\nimport { CheckedCurrentMemberButton, CommunityButtons } from \"./ui/button\";\r\nimport { fetchMessageAPI, fetchMessageReadAPI } from \"./api/fetchMessageAPI\";\r\nimport io from \"socket.io-client\";\r\nimport { changeChatRoomColor, changeInterestColor } from \"../profile/utilities/interestColor\";\r\n\r\nexport default function Chatroom(props) {\r\n\r\n    // 전달된 대화방과 해당하는 유저정보\r\n    const { chattingList, selectedList, flexCenter } = props;\r\n    // 모달을 관리하기 위한 props\r\n    const {friendList, blockedList, setActionList} = props;\r\n    // 채팅 송신을 위한 props\r\n    const {userInfo} = props;\r\n\r\n    // 현재 로그인한 유저\r\n    const {userName} = props;\r\n\r\n    // 대화목록 최신화 props\r\n    const {setFetchChatList} = props;\r\n\r\n    // 선택 된 방 상태관리\r\n    const [chatroom, setChatroom] = useState(\"\");\r\n\r\n    // 선택 된 방 테마 상태관리\r\n    const [chatroomTheme, setChatroomTheme] = useState(\"\");\r\n\r\n    // 선택 된 방 방장 프로필 상태관리\r\n    const [chatroomProfile, setChatroomProfile] = useState(\"\");\r\n\r\n    // 선택 된 방 아이디\r\n    const [chatroomID, setChatroomID] = useState(\"\");\r\n\r\n    // 참여인원/나가기 버튼 상태관리 스테이트\r\n    const [checkedMember, setCheckedMember] = useState(false);\r\n\r\n    // 나가기 버튼 상태관리 스테이트\r\n    const [checkedAction, setCheckedAction] = useState({});\r\n\r\n    // 채팅에 입력한 내용 상태관리\r\n    const [messageText, setMessageText] = useState(\"\");\r\n\r\n    // 현재 채팅에 방에 입장한 유저\r\n    const [chatroomUser,setChatRoomUser] = useState([]);\r\n\r\n\r\n    // selectedList 값이 변동이 있을때만 실행\r\n    useEffect(() => {\r\n        const selectedFriend = chattingList.find((friend) => friend.chat_room_id === selectedList);\r\n        if (selectedFriend) {\r\n            setChatroom(selectedFriend.owner_name);\r\n            setChatroomProfile(selectedFriend.profile_image_url);\r\n            setChatroomTheme(selectedFriend.theme);\r\n            setChatroomID(selectedFriend.chat_room_id);\r\n            console.log(selectedFriend);\r\n        }\r\n    }, [selectedList, chattingList]);\r\n\r\n    // 채팅내용 상태관리\r\n    const [messaging, setMessaging] = useState([]);\r\n\r\n    // 참여인원 상태관리\r\n    const [currentMembers, setCurrentMembers] = useState([]);\r\n\r\n    useEffect(() => {\r\n    const getMessage = async () => {\r\n        try {\r\n            // 메시지 불러오기\r\n            const rawMessages = await fetchMessageAPI(chatroomID, \"chatmessage\");\r\n            const currentMembersList = await fetchMessageAPI(chatroomID, \"currentMember\");\r\n\r\n            // 읽음 수 계산\r\n            const enrichedMessages = await Promise.all(rawMessages.map(async (msg) => {\r\n                const readResult = await fetchMessageReadAPI(userInfo.friend_id, msg.message_id);\r\n                const readCount = readResult[0]?.messageReadCount || 0;\r\n                return {\r\n                    ...msg,\r\n                    messageReads: currentMembersList.length - readCount\r\n                };\r\n            }));\r\n\r\n            setCurrentMembers(currentMembersList);\r\n            setMessaging(enrichedMessages);\r\n        } catch (error) {\r\n            console.error(\"메세지 불러오기 실패:\", error);\r\n        }\r\n    };\r\n\r\n    if (chatroomID) getMessage();\r\n}, [chatroomID]);\r\n\r\n    // 날짜 구분 로직 추가\r\n    const formattedMessages = useMemo(()=>{\r\n        return insertDateHeaders(messaging);\r\n    },[messaging]); \r\n\r\n    const socketRef = useRef();\r\n\r\n    // socket에 연결하는 로직\r\n    useEffect(() => {\r\n        // 소켓 생성\r\n        if (!socketRef.current && userInfo !== undefined) {\r\n            socketRef.current = io(\"http://localhost:5000\", {\r\n                transports: [\"websocket\"], // 안정적인 연결 방식 사용\r\n                autoConnect: false,        // 직접 connect() 호출\r\n                query:{\r\n                    userID: userInfo.friend_id, \r\n                }\r\n            });\r\n            console.log(\"userInfo:\",userInfo.friend_id);\r\n        }\r\n\r\n        const socket = socketRef.current;\r\n\r\n\r\n        if (!chatroomID) return;\r\n\r\n        console.log(\"[소켓] 연결 시도 (connect) - 방 ID:\", chatroomID);\r\n        socket.connect();\r\n\r\n        socket.on(\"connect\", () => {\r\n            console.log(\"[소켓] 연결 성공:\", socket.id);\r\n            socket.emit(\"join_room\", chatroomID);\r\n            console.log(\"[소켓] join_room emit:\", chatroomID);\r\n        });\r\n\r\n        // 현재 채팅중인 유저를 상태에 저장\r\n        socket.on(\"room_user_count\", (data) =>{setChatRoomUser(data.connectedUserIds)} );\r\n\r\n        // 메세지 수신하는 부분\r\n        socket.on(\"receive_message\", (msg) => {\r\n            console.log(\"[소켓] receive_message 수신:\", msg);\r\n            setMessaging((prev) => [...prev, msg]);\r\n            \r\n            // 본인이 보낸 메세지가 아니면, 읽음 처리 서버로 알림\r\n            if(msg.sender_id !== userInfo.friend_id){\r\n                socket.emit(\"message_read\",{\r\n                    message_id: msg.message_id,\r\n                    user_id: userInfo.friend_id\r\n                });\r\n            }\r\n        });\r\n\r\n        socket.on(\"disconnect\", () => {\r\n            console.log(\"[소켓] 연결 해제됨\");\r\n        });\r\n\r\n        socket.on(\"connect_error\", (err) => {\r\n            console.error(\"[소켓] 연결 오류:\", err.message);\r\n        });\r\n\r\n        return () => {\r\n            console.log(\"[소켓] leave_room emit:\", chatroomID);\r\n            socket.emit(\"leave_room\", chatroomID);\r\n            socket.off(\"receive_message\");\r\n            socket.disconnect();\r\n            console.log(\"[소켓] 연결 해제 (disconnect)\");\r\n        };\r\n    }, [chatroomID,userInfo]);\r\n\r\n    // 메세지 송신함수\r\n    const handleSendMessage = () => {\r\n        if (!messageText.trim()) return;\r\n\r\n        const socket = socketRef.current;\r\n\r\n        if (!socket || !socket.connected) {\r\n            console.warn(\"소켓 연결되지 않음. 메시지 전송 불가.\");\r\n            return;\r\n        }\r\n\r\n        const now = new Date();\r\n        const kst = new Date(now.getTime() + 9 * 60 * 60 * 1000); // 9시간 더함\r\n        const newMessage = {\r\n            chat_room_id: chatroomID,\r\n            sender_id: userInfo.friend_id,\r\n            profile_image_url: userInfo.profile_image_url,\r\n            name: userInfo.name,\r\n            message: messageText,\r\n            datetime: kst.toISOString().slice(0,19).replace(\"T\", \" \"),\r\n            messageReads: currentMembers.length - chatroomUser.length,\r\n        };\r\n\r\n        socket.emit(\"send_message\", newMessage);\r\n        // setMessaging((prev) => [...prev, newMessage]);\r\n        setMessageText(\"\");\r\n    };\r\n\r\n    // 메세지 전송 후 스크롤\r\n    const messageEndRef = useRef(null);\r\n\r\n    useEffect(()=> {\r\n        if(messageEndRef.current){\r\n            messageEndRef.current.scrollIntoView({block: \"end\"});\r\n        }\r\n        setFetchChatList(messaging);\r\n    },[messaging]);\r\n\r\n    // ineterest Color 변수\r\n    const interestColor = changeInterestColor(chatroomTheme.split(\"&\")[0].trim());\r\n    // chatRoom Color 변수\r\n    const chatRoomColor = changeChatRoomColor(chatroomTheme.split(\"&\")[0].trim());\r\n\r\n    return (\r\n        <>\r\n            {/* 선택된 대화방이 없을 시 조건문 */}\r\n            {chatroom === \"\" ? (\r\n                <div className={`${flexCenter} w-full h-full text-black text-opacity-50`}>\r\n                    불러온 대화방이 없습니다. 목록을 선택해주세요.\r\n                </div>\r\n            ) : (\r\n                // 대화방 선택 시\r\n                <>\r\n                    {/* 선택된 대화방 헤더영역 */}\r\n                    <div className={`flex items-center w-full h-[70px] border-b border-solid border-gary-300 bg-white rounded-t-3xl`}>\r\n                        {/* 선택된 대화방 헤더요소 */}\r\n                        \r\n                        <img src={`${chatroomProfile}`} alt=\"미니프로필\" className={`w-[40px] h-[40px] rounded-[50%] ml-4`} />\r\n                        <span className={`ml-4`}>{chatroom}</span>\r\n                        <span className={`ml-4 p-[0.15rem] px-3 text-[0.8rem] rounded-3xl ${interestColor} font-sans font-bold`}>\r\n                            {chatroomTheme}\r\n                        </span>\r\n                        <div\r\n                            onClick={() => {\r\n                                setCheckedMember(true);\r\n                            }}\r\n                            className={`${flexCenter} ml-auto bg-black hover:bg-blue-500 transition-colors duration-300 text-white rounded-md w-[80px] h-[30px] text-[0.8rem] font-bold cursor-pointer`}\r\n                        >\r\n                            참여인원\r\n                            {/* 참여인원 버튼 클릭 모달 */}\r\n                            <CheckedCurrentMemberButton\r\n                                friendList = {friendList}\r\n                                blockedList = {blockedList}\r\n                                checkedMember={checkedMember}\r\n                                setCheckedMember={setCheckedMember}\r\n                                chattingList={currentMembers}\r\n                                setActionList = {setActionList}\r\n                                userID = {userInfo.friend_id}\r\n                            />\r\n                        </div>\r\n\r\n                        <div\r\n                            onClick={() => {\r\n                                setCheckedAction(prev => ({ ...prev, [chattingList.id]: true }));\r\n                            }}\r\n                            className={`${flexCenter} mx-2 mr-4 bg-black hover:bg-blue-500 transition-colors duration-300 text-white rounded-md w-[80px] h-[30px] text-[0.8rem] font-bold cursor-pointer`}\r\n                        >\r\n                            방 나가기\r\n                            {/* 나가기 버튼 클릭 모달 */}\r\n                            <CommunityButtons\r\n                                checkedAction={checkedAction}\r\n                                setCheckedAction={setCheckedAction}\r\n                                title={`${chatroom}님의 대화방`}\r\n                                message={\"정말 나가시겠습니까?\"}\r\n                                action={\"나가기\"}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* 선택된 대화방 채팅영역 */}\r\n                    <div className={`flex flex-col w-full h-[calc(100%_-_140px)] overflow-y-auto ${chatRoomColor}`}>\r\n                        {formattedMessages.map((item, index) => {\r\n                            if (item.type === \"date-stamp\") {\r\n                                return (\r\n                                    <div key={`date-${index}`} className=\"flex justify-center text-gray-500 font-bold my-4 font-sans\">\r\n                                        <div className={`shadow-md px-2 rounded-2xl bg-white`}>📅 {formatDateKorean(item.date)}</div>\r\n                                    </div>\r\n                                );\r\n                            }\r\n                            return (\r\n                                <>\r\n                                    <Conversation \r\n                                        message={item}\r\n                                        currentUserName={userName}\r\n                                        friendList = {friendList}\r\n                                        blockedList = {blockedList}\r\n                                        chattingList = {messaging}\r\n                                        setActionList = {setActionList}\r\n                                        currentMembers = {currentMembers.length}\r\n                                        userID = {userInfo.friend_id}\r\n                                        messageReads = {item.messageReads}\r\n                                    />\r\n                                    {formattedMessages.length-1 === index && \r\n                                    <div ref={messageEndRef} className={`h-[10px]`}></div>\r\n                                    }\r\n                                </>                                   \r\n                            );\r\n                        })}\r\n                    </div>\r\n\r\n                    {/* 채팅내용 입력 영역 */}\r\n                    <div className={` flex items-center w-full h-[70px] border-t-[2px] border-solid border-gray-200 bg-white rounded-b-3xl`}>\r\n                        <textarea\r\n                        value={messageText}\r\n                        onKeyDown={(e) => {\r\n                            if(e.key === 'Enter'){\r\n                                if(e.shiftKey){\r\n                                    return;\r\n                                }else{\r\n                                    e.preventDefault(); // 기본 Enter 줄바꿈 방지\r\n                                    handleSendMessage();\r\n                                }\r\n                            }\r\n                        }} \r\n                        onChange={(e)=> {setMessageText(e.target.value); console.log(messageText)}}\r\n                        placeholder=\"내용을 입력하세요.\" className={`focus:outline-none resize-none pt-5 pl-5 w-[calc(100%_-_120px)] rounded-3xl`}></textarea>\r\n                        <img alt=\"클립\" src=\"/images/클립.png\" className={`w-[20px] h-[20px] mr-2`} />\r\n                        <div \r\n                        onClick={handleSendMessage}\r\n                        className={`w-[70px] h-[35px] bg-black hover:bg-blue-500 transition-colors duration-300 cursor-pointer rounded-lg flex justify-center items-center`}>\r\n                            <img alt=\"보내기\" src=\"/images/보내기.png\" className={`w-[20px] h-[20px]`} />\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}