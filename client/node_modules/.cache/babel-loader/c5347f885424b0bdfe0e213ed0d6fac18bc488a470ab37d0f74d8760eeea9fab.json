{"ast":null,"code":"//client/src/componant/content/api/gallery.js\n\nimport axios from 'axios';\n\n// 게시글 정보 불러오기\nexport async function galleryfetch(page = 1, limit = 15, sort, searchUser) {\n  let isSort = 'date DESC';\n  if (sort === \"최신순\") {\n    isSort = 'date DESC';\n  } else if (sort === \"지난순\") {\n    isSort = 'date ASC';\n  } else if (sort === \"조회순\") {\n    isSort = 'views DESC';\n  } else if (sort === \"인기순\") {\n    isSort = 'likes DESC';\n  }\n  console.log(isSort);\n  try {\n    const response = await axios.get(`http://localhost:5000/api/gallery?page=${page}&limit=${limit}&sort=${isSort}&searchUser=${searchUser}`);\n    // response.data = [{ id, username, …, thumbnail_url }, …]\n    return response.data;\n  } catch (error) {\n    console.error(\"갤러리 데이터 요청 실패:\", error);\n    return [];\n  }\n}\n\n// 게시글 댓글 불러오기\nexport const fetchComment = async (galleryID, userID) => {\n  try {\n    if (galleryID) {\n      const res = await axios.get(`http://localhost:5000/api/gallery/comments?galleryID=${galleryID}&userID=${userID}`);\n      console.log(\"정상적으로 실행중\");\n      return res.data;\n    }\n    console.log(\"아이디가 존재하지 않음\");\n  } catch (error) {\n    return {\n      message: \"댓글불러오기 실패:\",\n      error\n    };\n  }\n};\n\n// 게시글 댓글 저장\nexport const updateComment = async (galleryID, userID, commentText) => {\n  try {\n    const res = await axios.post(`http://localhost:5000/api/users/gallery/updateComment`, {\n      galleryID,\n      userID,\n      commentText\n    });\n    console.log(\"댓글저장중...\");\n    return res.data;\n  } catch (error) {\n    console.error(\"댓글 저장 실패:\", error);\n    return {\n      message: error\n    };\n  }\n};","map":{"version":3,"names":["axios","galleryfetch","page","limit","sort","searchUser","isSort","console","log","response","get","data","error","fetchComment","galleryID","userID","res","message","updateComment","commentText","post"],"sources":["C:/git/project/client/src/componant/content/api/gallery.js"],"sourcesContent":["//client/src/componant/content/api/gallery.js\r\n\r\nimport axios from 'axios';\r\n\r\n// 게시글 정보 불러오기\r\nexport async function galleryfetch(page = 1, limit = 15, sort, searchUser) {\r\n    let isSort = 'date DESC';\r\n\r\n    if(sort === \"최신순\"){\r\n        isSort = 'date DESC';\r\n    }else if(sort === \"지난순\"){\r\n        isSort = 'date ASC';\r\n    }else if(sort === \"조회순\"){\r\n        isSort = 'views DESC';\r\n    }else if(sort === \"인기순\"){\r\n        isSort = 'likes DESC';\r\n    }\r\n\r\n\r\n    console.log(isSort);\r\n\r\n    try {\r\n        const response = await axios.get(\r\n            `http://localhost:5000/api/gallery?page=${page}&limit=${limit}&sort=${isSort}&searchUser=${searchUser}`\r\n        );\r\n        // response.data = [{ id, username, …, thumbnail_url }, …]\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"갤러리 데이터 요청 실패:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// 게시글 댓글 불러오기\r\nexport const fetchComment = async (galleryID, userID) =>{\r\n    try{\r\n        if(galleryID){\r\n            const res = await axios.get(`http://localhost:5000/api/gallery/comments?galleryID=${galleryID}&userID=${userID}`);\r\n            console.log(\"정상적으로 실행중\");\r\n            return res.data;\r\n        }\r\n        console.log(\"아이디가 존재하지 않음\");\r\n    }catch(error){\r\n        return {message:\"댓글불러오기 실패:\",error};\r\n    }\r\n}\r\n\r\n// 게시글 댓글 저장\r\nexport const updateComment = async(galleryID, userID, commentText) =>{\r\n    try{\r\n        const res = await axios.post(`http://localhost:5000/api/users/gallery/updateComment`,{\r\n            galleryID,\r\n            userID,\r\n            commentText\r\n        });\r\n        console.log(\"댓글저장중...\");\r\n        return res.data;\r\n    }catch(error){\r\n        console.error(\"댓글 저장 실패:\",error);\r\n        return {message:error};\r\n    }\r\n}"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,eAAeC,YAAYA,CAACC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,EAAE,EAAEC,IAAI,EAAEC,UAAU,EAAE;EACvE,IAAIC,MAAM,GAAG,WAAW;EAExB,IAAGF,IAAI,KAAK,KAAK,EAAC;IACdE,MAAM,GAAG,WAAW;EACxB,CAAC,MAAK,IAAGF,IAAI,KAAK,KAAK,EAAC;IACpBE,MAAM,GAAG,UAAU;EACvB,CAAC,MAAK,IAAGF,IAAI,KAAK,KAAK,EAAC;IACpBE,MAAM,GAAG,YAAY;EACzB,CAAC,MAAK,IAAGF,IAAI,KAAK,KAAK,EAAC;IACpBE,MAAM,GAAG,YAAY;EACzB;EAGAC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EAEnB,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAC5B,0CAA0CR,IAAI,UAAUC,KAAK,SAASG,MAAM,eAAeD,UAAU,EACzG,CAAC;IACD;IACA,OAAOI,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZL,OAAO,CAACK,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,OAAO,EAAE;EACb;AACJ;;AAEA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,SAAS,EAAEC,MAAM,KAAI;EACpD,IAAG;IACC,IAAGD,SAAS,EAAC;MACT,MAAME,GAAG,GAAG,MAAMhB,KAAK,CAACU,GAAG,CAAC,wDAAwDI,SAAS,WAAWC,MAAM,EAAE,CAAC;MACjHR,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxB,OAAOQ,GAAG,CAACL,IAAI;IACnB;IACAJ,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAC/B,CAAC,QAAMI,KAAK,EAAC;IACT,OAAO;MAACK,OAAO,EAAC,YAAY;MAACL;IAAK,CAAC;EACvC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,aAAa,GAAG,MAAAA,CAAMJ,SAAS,EAAEC,MAAM,EAAEI,WAAW,KAAI;EACjE,IAAG;IACC,MAAMH,GAAG,GAAG,MAAMhB,KAAK,CAACoB,IAAI,CAAC,uDAAuD,EAAC;MACjFN,SAAS;MACTC,MAAM;MACNI;IACJ,CAAC,CAAC;IACFZ,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvB,OAAOQ,GAAG,CAACL,IAAI;EACnB,CAAC,QAAMC,KAAK,EAAC;IACTL,OAAO,CAACK,KAAK,CAAC,WAAW,EAACA,KAAK,CAAC;IAChC,OAAO;MAACK,OAAO,EAACL;IAAK,CAAC;EAC1B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}