{"ast":null,"code":"//client/src/componant/community/chatroom.js\nimport{useEffect,useState,useMemo,useRef}from\"react\";import Conversation from\"./conversation\";import{insertDateHeaders,formatDateKorean}from\"./utilities/dateUtils\";import{CheckedCurrentMemberButton,CommunityButtons}from\"./ui/button\";import{fetchMessageAPI,fetchMessageReadAPI}from\"./api/fetchMessageAPI\";import io from\"socket.io-client\";import{changeChatRoomColor,changeInterestColor}from\"../profile/utilities/interestColor\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function Chatroom(props){// 전달된 대화방과 해당하는 유저정보\nconst{chattingList,selectedList,flexCenter}=props;// 모달을 관리하기 위한 props\nconst{friendList,blockedList,setActionList}=props;// 채팅 송신을 위한 props\nconst{userInfo}=props;// 현재 로그인한 유저\nconst{userName}=props;// 대화목록 최신화 props\nconst{setFetchChatList}=props;// 선택 된 방 상태관리\nconst[chatroom,setChatroom]=useState(\"\");// 선택 된 방 테마 상태관리\nconst[chatroomTheme,setChatroomTheme]=useState(\"\");// 선택 된 방 방장 프로필 상태관리\nconst[chatroomProfile,setChatroomProfile]=useState(\"\");// 선택 된 방 아이디\nconst[chatroomID,setChatroomID]=useState(\"\");// 참여인원/나가기 버튼 상태관리 스테이트\nconst[checkedMember,setCheckedMember]=useState(false);// 나가기 버튼 상태관리 스테이트\nconst[checkedAction,setCheckedAction]=useState({});// 채팅에 입력한 내용 상태관리\nconst[messageText,setMessageText]=useState(\"\");// 현재 채팅에 방에 입장한 유저\nconst[chatroomUser,setChatRoomUser]=useState([]);// selectedList 값이 변동이 있을때만 실행\nuseEffect(()=>{const selectedFriend=chattingList.find(friend=>friend.chat_room_id===selectedList);if(selectedFriend){setChatroom(selectedFriend.owner_name);setChatroomProfile(selectedFriend.profile_image_url);setChatroomTheme(selectedFriend.theme);setChatroomID(selectedFriend.chat_room_id);console.log(selectedFriend);}},[selectedList,chattingList]);// 채팅내용 상태관리\nconst[messaging,setMessaging]=useState([]);// 참여인원 상태관리\nconst[currentMembers,setCurrentMembers]=useState([]);useEffect(()=>{const getMessage=async()=>{try{// 메시지 불러오기\nconst rawMessages=await fetchMessageAPI(chatroomID,\"chatmessage\");const currentMembersList=await fetchMessageAPI(chatroomID,\"currentMember\");// 읽음 수 계산\nconst enrichedMessages=await Promise.all(rawMessages.map(async msg=>{var _readResult$;const readResult=await fetchMessageReadAPI(userInfo.friend_id,msg.message_id);const readCount=((_readResult$=readResult[0])===null||_readResult$===void 0?void 0:_readResult$.messageReadCount)||0;return{...msg,messageReads:currentMembersList.length-readCount};}));setCurrentMembers(currentMembersList);setMessaging(enrichedMessages);}catch(error){console.error(\"메세지 불러오기 실패:\",error);}};if(chatroomID)getMessage();},[chatroomID]);// 날짜 구분 로직 추가\nconst formattedMessages=useMemo(()=>{return insertDateHeaders(messaging);},[messaging]);const socketRef=useRef();// socket에 연결하는 로직\nuseEffect(()=>{// 소켓 생성\nif(!socketRef.current&&userInfo!==undefined){socketRef.current=io(\"http://localhost:5000\",{transports:[\"websocket\"],// 안정적인 연결 방식 사용\nautoConnect:false,// 직접 connect() 호출\nquery:{userID:userInfo.friend_id}});console.log(\"userInfo:\",userInfo.friend_id);}const socket=socketRef.current;if(!chatroomID)return;console.log(\"[소켓] 연결 시도 (connect) - 방 ID:\",chatroomID);socket.connect();socket.on(\"connect\",()=>{console.log(\"[소켓] 연결 성공:\",socket.id);socket.emit(\"join_room\",chatroomID);console.log(\"[소켓] join_room emit:\",chatroomID);});// 현재 채팅중인 유저를 상태에 저장\nsocket.on(\"room_user_count\",data=>{setChatRoomUser(data.connectedUserIds);});// 메세지 수신하는 부분\nsocket.on(\"receive_message\",msg=>{console.log(\"[소켓] receive_message 수신:\",msg);setMessaging(prev=>[...prev,msg]);// 본인이 보낸 메세지가 아니면, 읽음 처리 서버로 알림\nif(msg.sender_id!==userInfo.friend_id){socket.emit(\"message_read\",{message_id:msg.message_id,user_id:userInfo.friend_id});}});socket.on(\"disconnect\",()=>{console.log(\"[소켓] 연결 해제됨\");});socket.on(\"connect_error\",err=>{console.error(\"[소켓] 연결 오류:\",err.message);});return()=>{console.log(\"[소켓] leave_room emit:\",chatroomID);socket.emit(\"leave_room\",chatroomID);socket.off(\"receive_message\");socket.disconnect();console.log(\"[소켓] 연결 해제 (disconnect)\");};},[chatroomID,userInfo]);// 메세지 송신함수\nconst handleSendMessage=()=>{if(!messageText.trim())return;const socket=socketRef.current;if(!socket||!socket.connected){console.warn(\"소켓 연결되지 않음. 메시지 전송 불가.\");return;}const now=new Date();const kst=new Date(now.getTime()+9*60*60*1000);// 9시간 더함\nconst newMessage={chat_room_id:chatroomID,sender_id:userInfo.friend_id,profile_image_url:userInfo.profile_image_url,name:userInfo.name,message:messageText,datetime:kst.toISOString().slice(0,19).replace(\"T\",\" \"),messageReads:currentMembers.length-chatroomUser.length};socket.emit(\"send_message\",newMessage);// setMessaging((prev) => [...prev, newMessage]);\nsetMessageText(\"\");};// 메세지 전송 후 스크롤\nconst messageEndRef=useRef(null);useEffect(()=>{if(messageEndRef.current){messageEndRef.current.scrollIntoView({block:\"end\"});}setFetchChatList(messaging);},[messaging]);// ineterest Color 변수\nconst interestColor=changeInterestColor(chatroomTheme.split(\"&\")[0].trim());// chatRoom Color 변수\nconst chatRoomColor=changeChatRoomColor(chatroomTheme.split(\"&\")[0].trim());return/*#__PURE__*/_jsx(_Fragment,{children:chatroom===\"\"?/*#__PURE__*/_jsx(\"div\",{className:`${flexCenter} w-full h-full text-black text-opacity-50`,children:\"\\uBD88\\uB7EC\\uC628 \\uB300\\uD654\\uBC29\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uBAA9\\uB85D\\uC744 \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"}):/*#__PURE__*/// 대화방 선택 시\n_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:`flex items-center w-full h-[70px] border-b border-solid border-gary-300 bg-white rounded-t-3xl`,children:[/*#__PURE__*/_jsx(\"img\",{src:`${chatroomProfile}`,alt:\"\\uBBF8\\uB2C8\\uD504\\uB85C\\uD544\",className:`w-[40px] h-[40px] rounded-[50%] ml-4`}),/*#__PURE__*/_jsx(\"span\",{className:`ml-4`,children:chatroom}),/*#__PURE__*/_jsx(\"span\",{className:`ml-4 p-[0.15rem] px-3 text-[0.8rem] rounded-3xl ${interestColor} font-sans font-bold`,children:chatroomTheme}),/*#__PURE__*/_jsxs(\"div\",{onClick:()=>{setCheckedMember(true);},className:`${flexCenter} ml-auto bg-black hover:bg-blue-500 transition-colors duration-300 text-white rounded-md w-[80px] h-[30px] text-[0.8rem] font-bold cursor-pointer`,children:[\"\\uCC38\\uC5EC\\uC778\\uC6D0\",/*#__PURE__*/_jsx(CheckedCurrentMemberButton,{friendList:friendList,blockedList:blockedList,checkedMember:checkedMember,setCheckedMember:setCheckedMember,chattingList:currentMembers,setActionList:setActionList,userID:userInfo.friend_id})]}),/*#__PURE__*/_jsxs(\"div\",{onClick:()=>{setCheckedAction(prev=>({...prev,[chattingList.id]:true}));},className:`${flexCenter} mx-2 mr-4 bg-black hover:bg-blue-500 transition-colors duration-300 text-white rounded-md w-[80px] h-[30px] text-[0.8rem] font-bold cursor-pointer`,children:[\"\\uBC29 \\uB098\\uAC00\\uAE30\",/*#__PURE__*/_jsx(CommunityButtons,{checkedAction:checkedAction,setCheckedAction:setCheckedAction,title:`${chatroom}님의 대화방`,message:\"정말 나가시겠습니까?\",action:\"나가기\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:`flex flex-col w-full h-[calc(100%_-_140px)] overflow-y-auto ${chatRoomColor}`,children:formattedMessages.map((item,index)=>{if(item.type===\"date-stamp\"){return/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center text-gray-500 font-bold my-4 font-sans\",children:/*#__PURE__*/_jsxs(\"div\",{className:`shadow-md px-2 rounded-2xl bg-white`,children:[\"\\uD83D\\uDCC5 \",formatDateKorean(item.date)]})},`date-${index}`);}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Conversation,{message:item,currentUserName:userName,friendList:friendList,blockedList:blockedList,chattingList:messaging,setActionList:setActionList,currentMembers:currentMembers.length,userID:userInfo.friend_id,messageReads:item.messageReads}),formattedMessages.length-1===index&&/*#__PURE__*/_jsx(\"div\",{ref:messageEndRef,className:`h-[10px]`})]});})}),/*#__PURE__*/_jsxs(\"div\",{className:` flex items-center w-full h-[70px] border-t-[2px] border-solid border-gray-200 bg-white rounded-b-3xl`,children:[/*#__PURE__*/_jsx(\"textarea\",{value:messageText,onKeyDown:e=>{if(e.key==='Enter'){if(e.shiftKey){return;}else{e.preventDefault();// 기본 Enter 줄바꿈 방지\nhandleSendMessage();}}},onChange:e=>{setMessageText(e.target.value);console.log(messageText);},placeholder:\"\\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\",className:`focus:outline-none resize-none pt-5 pl-5 w-[calc(100%_-_120px)] rounded-3xl`}),/*#__PURE__*/_jsx(\"img\",{alt:\"\\uD074\\uB9BD\",src:\"/images/\\uD074\\uB9BD.png\",className:`w-[20px] h-[20px] mr-2`}),/*#__PURE__*/_jsx(\"div\",{onClick:handleSendMessage,className:`w-[70px] h-[35px] bg-black hover:bg-blue-500 transition-colors duration-300 cursor-pointer rounded-lg flex justify-center items-center`,children:/*#__PURE__*/_jsx(\"img\",{alt:\"\\uBCF4\\uB0B4\\uAE30\",src:\"/images/\\uBCF4\\uB0B4\\uAE30.png\",className:`w-[20px] h-[20px]`})})]})]})});}","map":{"version":3,"names":["useEffect","useState","useMemo","useRef","Conversation","insertDateHeaders","formatDateKorean","CheckedCurrentMemberButton","CommunityButtons","fetchMessageAPI","fetchMessageReadAPI","io","changeChatRoomColor","changeInterestColor","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Chatroom","props","chattingList","selectedList","flexCenter","friendList","blockedList","setActionList","userInfo","userName","setFetchChatList","chatroom","setChatroom","chatroomTheme","setChatroomTheme","chatroomProfile","setChatroomProfile","chatroomID","setChatroomID","checkedMember","setCheckedMember","checkedAction","setCheckedAction","messageText","setMessageText","chatroomUser","setChatRoomUser","selectedFriend","find","friend","chat_room_id","owner_name","profile_image_url","theme","console","log","messaging","setMessaging","currentMembers","setCurrentMembers","getMessage","rawMessages","currentMembersList","enrichedMessages","Promise","all","map","msg","_readResult$","readResult","friend_id","message_id","readCount","messageReadCount","messageReads","length","error","formattedMessages","socketRef","current","undefined","transports","autoConnect","query","userID","socket","connect","on","id","emit","data","connectedUserIds","prev","sender_id","user_id","err","message","off","disconnect","handleSendMessage","trim","connected","warn","now","Date","kst","getTime","newMessage","name","datetime","toISOString","slice","replace","messageEndRef","scrollIntoView","block","interestColor","split","chatRoomColor","children","className","src","alt","onClick","title","action","item","index","type","date","currentUserName","ref","value","onKeyDown","e","key","shiftKey","preventDefault","onChange","target","placeholder"],"sources":["C:/git/project/client/src/componant/community/chatroom.js"],"sourcesContent":["//client/src/componant/community/chatroom.js\r\n\r\nimport { useEffect, useState, useMemo, useRef } from \"react\";\r\nimport Conversation from \"./conversation\";\r\nimport { insertDateHeaders, formatDateKorean } from \"./utilities/dateUtils\";\r\nimport { CheckedCurrentMemberButton, CommunityButtons } from \"./ui/button\";\r\nimport { fetchMessageAPI, fetchMessageReadAPI } from \"./api/fetchMessageAPI\";\r\nimport io from \"socket.io-client\";\r\nimport { changeChatRoomColor, changeInterestColor } from \"../profile/utilities/interestColor\";\r\n\r\nexport default function Chatroom(props) {\r\n\r\n    // 전달된 대화방과 해당하는 유저정보\r\n    const { chattingList, selectedList, flexCenter } = props;\r\n    // 모달을 관리하기 위한 props\r\n    const {friendList, blockedList, setActionList} = props;\r\n    // 채팅 송신을 위한 props\r\n    const {userInfo} = props;\r\n\r\n    // 현재 로그인한 유저\r\n    const {userName} = props;\r\n\r\n    // 대화목록 최신화 props\r\n    const {setFetchChatList} = props;\r\n\r\n    // 선택 된 방 상태관리\r\n    const [chatroom, setChatroom] = useState(\"\");\r\n\r\n    // 선택 된 방 테마 상태관리\r\n    const [chatroomTheme, setChatroomTheme] = useState(\"\");\r\n\r\n    // 선택 된 방 방장 프로필 상태관리\r\n    const [chatroomProfile, setChatroomProfile] = useState(\"\");\r\n\r\n    // 선택 된 방 아이디\r\n    const [chatroomID, setChatroomID] = useState(\"\");\r\n\r\n    // 참여인원/나가기 버튼 상태관리 스테이트\r\n    const [checkedMember, setCheckedMember] = useState(false);\r\n\r\n    // 나가기 버튼 상태관리 스테이트\r\n    const [checkedAction, setCheckedAction] = useState({});\r\n\r\n    // 채팅에 입력한 내용 상태관리\r\n    const [messageText, setMessageText] = useState(\"\");\r\n\r\n    // 현재 채팅에 방에 입장한 유저\r\n    const [chatroomUser,setChatRoomUser] = useState([]);\r\n\r\n\r\n    // selectedList 값이 변동이 있을때만 실행\r\n    useEffect(() => {\r\n        const selectedFriend = chattingList.find((friend) => friend.chat_room_id === selectedList);\r\n        if (selectedFriend) {\r\n            setChatroom(selectedFriend.owner_name);\r\n            setChatroomProfile(selectedFriend.profile_image_url);\r\n            setChatroomTheme(selectedFriend.theme);\r\n            setChatroomID(selectedFriend.chat_room_id);\r\n            console.log(selectedFriend);\r\n        }\r\n    }, [selectedList, chattingList]);\r\n\r\n    // 채팅내용 상태관리\r\n    const [messaging, setMessaging] = useState([]);\r\n\r\n    // 참여인원 상태관리\r\n    const [currentMembers, setCurrentMembers] = useState([]);\r\n\r\n    useEffect(() => {\r\n    const getMessage = async () => {\r\n        try {\r\n            // 메시지 불러오기\r\n            const rawMessages = await fetchMessageAPI(chatroomID, \"chatmessage\");\r\n            const currentMembersList = await fetchMessageAPI(chatroomID, \"currentMember\");\r\n\r\n            // 읽음 수 계산\r\n            const enrichedMessages = await Promise.all(rawMessages.map(async (msg) => {\r\n                const readResult = await fetchMessageReadAPI(userInfo.friend_id, msg.message_id);\r\n                const readCount = readResult[0]?.messageReadCount || 0;\r\n                return {\r\n                    ...msg,\r\n                    messageReads: currentMembersList.length - readCount\r\n                };\r\n            }));\r\n\r\n            setCurrentMembers(currentMembersList);\r\n            setMessaging(enrichedMessages);\r\n        } catch (error) {\r\n            console.error(\"메세지 불러오기 실패:\", error);\r\n        }\r\n    };\r\n\r\n    if (chatroomID) getMessage();\r\n}, [chatroomID]);\r\n\r\n    // 날짜 구분 로직 추가\r\n    const formattedMessages = useMemo(()=>{\r\n        return insertDateHeaders(messaging);\r\n    },[messaging]); \r\n\r\n    const socketRef = useRef();\r\n\r\n    // socket에 연결하는 로직\r\n    useEffect(() => {\r\n        // 소켓 생성\r\n        if (!socketRef.current && userInfo !== undefined) {\r\n            socketRef.current = io(\"http://localhost:5000\", {\r\n                transports: [\"websocket\"], // 안정적인 연결 방식 사용\r\n                autoConnect: false,        // 직접 connect() 호출\r\n                query:{\r\n                    userID: userInfo.friend_id, \r\n                }\r\n            });\r\n            console.log(\"userInfo:\",userInfo.friend_id);\r\n        }\r\n\r\n        const socket = socketRef.current;\r\n\r\n\r\n        if (!chatroomID) return;\r\n\r\n        console.log(\"[소켓] 연결 시도 (connect) - 방 ID:\", chatroomID);\r\n        socket.connect();\r\n\r\n        socket.on(\"connect\", () => {\r\n            console.log(\"[소켓] 연결 성공:\", socket.id);\r\n            socket.emit(\"join_room\", chatroomID);\r\n            console.log(\"[소켓] join_room emit:\", chatroomID);\r\n        });\r\n\r\n        // 현재 채팅중인 유저를 상태에 저장\r\n        socket.on(\"room_user_count\", (data) =>{setChatRoomUser(data.connectedUserIds)} );\r\n\r\n        // 메세지 수신하는 부분\r\n        socket.on(\"receive_message\", (msg) => {\r\n            console.log(\"[소켓] receive_message 수신:\", msg);\r\n            setMessaging((prev) => [...prev, msg]);\r\n            \r\n            // 본인이 보낸 메세지가 아니면, 읽음 처리 서버로 알림\r\n            if(msg.sender_id !== userInfo.friend_id){\r\n                socket.emit(\"message_read\",{\r\n                    message_id: msg.message_id,\r\n                    user_id: userInfo.friend_id\r\n                });\r\n            }\r\n        });\r\n\r\n        socket.on(\"disconnect\", () => {\r\n            console.log(\"[소켓] 연결 해제됨\");\r\n        });\r\n\r\n        socket.on(\"connect_error\", (err) => {\r\n            console.error(\"[소켓] 연결 오류:\", err.message);\r\n        });\r\n\r\n        return () => {\r\n            console.log(\"[소켓] leave_room emit:\", chatroomID);\r\n            socket.emit(\"leave_room\", chatroomID);\r\n            socket.off(\"receive_message\");\r\n            socket.disconnect();\r\n            console.log(\"[소켓] 연결 해제 (disconnect)\");\r\n        };\r\n    }, [chatroomID,userInfo]);\r\n\r\n    // 메세지 송신함수\r\n    const handleSendMessage = () => {\r\n        if (!messageText.trim()) return;\r\n\r\n        const socket = socketRef.current;\r\n\r\n        if (!socket || !socket.connected) {\r\n            console.warn(\"소켓 연결되지 않음. 메시지 전송 불가.\");\r\n            return;\r\n        }\r\n\r\n        const now = new Date();\r\n        const kst = new Date(now.getTime() + 9 * 60 * 60 * 1000); // 9시간 더함\r\n        const newMessage = {\r\n            chat_room_id: chatroomID,\r\n            sender_id: userInfo.friend_id,\r\n            profile_image_url: userInfo.profile_image_url,\r\n            name: userInfo.name,\r\n            message: messageText,\r\n            datetime: kst.toISOString().slice(0,19).replace(\"T\", \" \"),\r\n            messageReads: currentMembers.length - chatroomUser.length,\r\n        };\r\n\r\n        socket.emit(\"send_message\", newMessage);\r\n        // setMessaging((prev) => [...prev, newMessage]);\r\n        setMessageText(\"\");\r\n    };\r\n\r\n    // 메세지 전송 후 스크롤\r\n    const messageEndRef = useRef(null);\r\n\r\n    useEffect(()=> {\r\n        if(messageEndRef.current){\r\n            messageEndRef.current.scrollIntoView({block: \"end\"});\r\n        }\r\n        setFetchChatList(messaging);\r\n    },[messaging]);\r\n\r\n    // ineterest Color 변수\r\n    const interestColor = changeInterestColor(chatroomTheme.split(\"&\")[0].trim());\r\n    // chatRoom Color 변수\r\n    const chatRoomColor = changeChatRoomColor(chatroomTheme.split(\"&\")[0].trim());\r\n\r\n    return (\r\n        <>\r\n            {/* 선택된 대화방이 없을 시 조건문 */}\r\n            {chatroom === \"\" ? (\r\n                <div className={`${flexCenter} w-full h-full text-black text-opacity-50`}>\r\n                    불러온 대화방이 없습니다. 목록을 선택해주세요.\r\n                </div>\r\n            ) : (\r\n                // 대화방 선택 시\r\n                <>\r\n                    {/* 선택된 대화방 헤더영역 */}\r\n                    <div className={`flex items-center w-full h-[70px] border-b border-solid border-gary-300 bg-white rounded-t-3xl`}>\r\n                        {/* 선택된 대화방 헤더요소 */}\r\n                        \r\n                        <img src={`${chatroomProfile}`} alt=\"미니프로필\" className={`w-[40px] h-[40px] rounded-[50%] ml-4`} />\r\n                        <span className={`ml-4`}>{chatroom}</span>\r\n                        <span className={`ml-4 p-[0.15rem] px-3 text-[0.8rem] rounded-3xl ${interestColor} font-sans font-bold`}>\r\n                            {chatroomTheme}\r\n                        </span>\r\n                        <div\r\n                            onClick={() => {\r\n                                setCheckedMember(true);\r\n                            }}\r\n                            className={`${flexCenter} ml-auto bg-black hover:bg-blue-500 transition-colors duration-300 text-white rounded-md w-[80px] h-[30px] text-[0.8rem] font-bold cursor-pointer`}\r\n                        >\r\n                            참여인원\r\n                            {/* 참여인원 버튼 클릭 모달 */}\r\n                            <CheckedCurrentMemberButton\r\n                                friendList = {friendList}\r\n                                blockedList = {blockedList}\r\n                                checkedMember={checkedMember}\r\n                                setCheckedMember={setCheckedMember}\r\n                                chattingList={currentMembers}\r\n                                setActionList = {setActionList}\r\n                                userID = {userInfo.friend_id}\r\n                            />\r\n                        </div>\r\n\r\n                        <div\r\n                            onClick={() => {\r\n                                setCheckedAction(prev => ({ ...prev, [chattingList.id]: true }));\r\n                            }}\r\n                            className={`${flexCenter} mx-2 mr-4 bg-black hover:bg-blue-500 transition-colors duration-300 text-white rounded-md w-[80px] h-[30px] text-[0.8rem] font-bold cursor-pointer`}\r\n                        >\r\n                            방 나가기\r\n                            {/* 나가기 버튼 클릭 모달 */}\r\n                            <CommunityButtons\r\n                                checkedAction={checkedAction}\r\n                                setCheckedAction={setCheckedAction}\r\n                                title={`${chatroom}님의 대화방`}\r\n                                message={\"정말 나가시겠습니까?\"}\r\n                                action={\"나가기\"}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* 선택된 대화방 채팅영역 */}\r\n                    <div className={`flex flex-col w-full h-[calc(100%_-_140px)] overflow-y-auto ${chatRoomColor}`}>\r\n                        {formattedMessages.map((item, index) => {\r\n                            if (item.type === \"date-stamp\") {\r\n                                return (\r\n                                    <div key={`date-${index}`} className=\"flex justify-center text-gray-500 font-bold my-4 font-sans\">\r\n                                        <div className={`shadow-md px-2 rounded-2xl bg-white`}>📅 {formatDateKorean(item.date)}</div>\r\n                                    </div>\r\n                                );\r\n                            }\r\n                            return (\r\n                                <>\r\n                                    <Conversation \r\n                                        message={item}\r\n                                        currentUserName={userName}\r\n                                        friendList = {friendList}\r\n                                        blockedList = {blockedList}\r\n                                        chattingList = {messaging}\r\n                                        setActionList = {setActionList}\r\n                                        currentMembers = {currentMembers.length}\r\n                                        userID = {userInfo.friend_id}\r\n                                        messageReads = {item.messageReads}\r\n                                    />\r\n                                    {formattedMessages.length-1 === index && \r\n                                    <div ref={messageEndRef} className={`h-[10px]`}></div>\r\n                                    }\r\n                                </>                                   \r\n                            );\r\n                        })}\r\n                    </div>\r\n\r\n                    {/* 채팅내용 입력 영역 */}\r\n                    <div className={` flex items-center w-full h-[70px] border-t-[2px] border-solid border-gray-200 bg-white rounded-b-3xl`}>\r\n                        <textarea\r\n                        value={messageText}\r\n                        onKeyDown={(e) => {\r\n                            if(e.key === 'Enter'){\r\n                                if(e.shiftKey){\r\n                                    return;\r\n                                }else{\r\n                                    e.preventDefault(); // 기본 Enter 줄바꿈 방지\r\n                                    handleSendMessage();\r\n                                }\r\n                            }\r\n                        }} \r\n                        onChange={(e)=> {setMessageText(e.target.value); console.log(messageText)}}\r\n                        placeholder=\"내용을 입력하세요.\" className={`focus:outline-none resize-none pt-5 pl-5 w-[calc(100%_-_120px)] rounded-3xl`}></textarea>\r\n                        <img alt=\"클립\" src=\"/images/클립.png\" className={`w-[20px] h-[20px] mr-2`} />\r\n                        <div \r\n                        onClick={handleSendMessage}\r\n                        className={`w-[70px] h-[35px] bg-black hover:bg-blue-500 transition-colors duration-300 cursor-pointer rounded-lg flex justify-center items-center`}>\r\n                            <img alt=\"보내기\" src=\"/images/보내기.png\" className={`w-[20px] h-[20px]`} />\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}